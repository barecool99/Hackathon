from app import db

class DiagnosisData(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    diagnosis = db.Column(db.String(10), index = True, unique = False)
    radius_mean = db.Column(db.Float, index = True, unique = False)
    texture_mean = db.Column(db.Float, index = True, unique = False)
    perimeter_mean = db.Column(db.Float, index = True, unique = False)
    area_mean = db.Column(db.Float, index = True, unique = False)
    smoothness_mean = db.Column(db.Float, index = True, unique = False)
    compactness_mean = db.Column(db.Float, index = True, unique = False)
    concavity_mean = db.Column(db.Float, index = True, unique = False)
    concave_points_mean = db.Column(db.Float, index = True, unique = False)
    symmetry_mean = db.Column(db.Float, index = True, unique = False)
    fractal_dimension_mean = db.Column(db.Float, index = True, unique = False)
    radius_se = db.Column(db.Float, index = True, unique = False)
    texture_se = db.Column(db.Float, index = True, unique = False)
    perimeter_se = db.Column(db.Float, index = True, unique = False)
    area_se = db.Column(db.Float, index = True, unique = False)
    smoothness_se = db.Column(db.Float, index = True, unique = False)
    compactness_se = db.Column(db.Float, index = True, unique = False)
    concavity_se = db.Column(db.Float, index = True, unique = False)
    concave_points_se = db.Column(db.Float, index = True, unique = False)
    symmetry_se = db.Column(db.Float, index = True, unique = False)
    fractal_dimension_se = db.Column(db.Float, index = True, unique = False)
    radius_worst = db.Column(db.Float, index = True, unique = False)
    texture_worst = db.Column(db.Float, index = True, unique = False)
    perimeter_worst = db.Column(db.Float, index = True, unique = False)
    area_worst = db.Column(db.Float, index = True, unique = False)
    smoothness_worst = db.Column(db.Float, index = True, unique = False)
    compactness_worst = db.Column(db.Float, index = True, unique = False)
    concavity_worst = db.Column(db.Float, index = True, unique = False)
    concave_points_worst = db.Column(db.Float, index = True, unique = False)
    symmetry_worst = db.Column(db.Float, index = True, unique = False)
    fractal_dimension_worst = db.Column(db.Float, index = True, unique = False)

    def __repr__(self):
        return "<ID: {} | Diagnosis: {}".format(self.id, self.diagnosis)
